--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="MAX 10" LPM_DECODES=19 LPM_WIDTH=5 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 36 
SUBDESIGN decode_uk9
( 
	data[4..0]	:	input;
	eq[18..0]	:	output;
) 
VARIABLE 
	data_wire[4..0]	: WIRE;
	eq_node[18..0]	: WIRE;
	eq_wire[31..0]	: WIRE;
	w_anode1003w[3..0]	: WIRE;
	w_anode1013w[3..0]	: WIRE;
	w_anode1023w[3..0]	: WIRE;
	w_anode655w[2..0]	: WIRE;
	w_anode669w[3..0]	: WIRE;
	w_anode686w[3..0]	: WIRE;
	w_anode696w[3..0]	: WIRE;
	w_anode706w[3..0]	: WIRE;
	w_anode716w[3..0]	: WIRE;
	w_anode726w[3..0]	: WIRE;
	w_anode736w[3..0]	: WIRE;
	w_anode746w[3..0]	: WIRE;
	w_anode758w[2..0]	: WIRE;
	w_anode768w[3..0]	: WIRE;
	w_anode779w[3..0]	: WIRE;
	w_anode789w[3..0]	: WIRE;
	w_anode799w[3..0]	: WIRE;
	w_anode809w[3..0]	: WIRE;
	w_anode819w[3..0]	: WIRE;
	w_anode829w[3..0]	: WIRE;
	w_anode839w[3..0]	: WIRE;
	w_anode850w[2..0]	: WIRE;
	w_anode860w[3..0]	: WIRE;
	w_anode871w[3..0]	: WIRE;
	w_anode881w[3..0]	: WIRE;
	w_anode891w[3..0]	: WIRE;
	w_anode901w[3..0]	: WIRE;
	w_anode911w[3..0]	: WIRE;
	w_anode921w[3..0]	: WIRE;
	w_anode931w[3..0]	: WIRE;
	w_anode942w[2..0]	: WIRE;
	w_anode952w[3..0]	: WIRE;
	w_anode963w[3..0]	: WIRE;
	w_anode973w[3..0]	: WIRE;
	w_anode983w[3..0]	: WIRE;
	w_anode993w[3..0]	: WIRE;
	w_data653w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[18..0] = eq_wire[18..0];
	eq_wire[] = ( ( w_anode1023w[3..3], w_anode1013w[3..3], w_anode1003w[3..3], w_anode993w[3..3], w_anode983w[3..3], w_anode973w[3..3], w_anode963w[3..3], w_anode952w[3..3]), ( w_anode931w[3..3], w_anode921w[3..3], w_anode911w[3..3], w_anode901w[3..3], w_anode891w[3..3], w_anode881w[3..3], w_anode871w[3..3], w_anode860w[3..3]), ( w_anode839w[3..3], w_anode829w[3..3], w_anode819w[3..3], w_anode809w[3..3], w_anode799w[3..3], w_anode789w[3..3], w_anode779w[3..3], w_anode768w[3..3]), ( w_anode746w[3..3], w_anode736w[3..3], w_anode726w[3..3], w_anode716w[3..3], w_anode706w[3..3], w_anode696w[3..3], w_anode686w[3..3], w_anode669w[3..3]));
	w_anode1003w[] = ( (w_anode1003w[2..2] & w_data653w[2..2]), (w_anode1003w[1..1] & (! w_data653w[1..1])), (w_anode1003w[0..0] & w_data653w[0..0]), w_anode942w[2..2]);
	w_anode1013w[] = ( (w_anode1013w[2..2] & w_data653w[2..2]), (w_anode1013w[1..1] & w_data653w[1..1]), (w_anode1013w[0..0] & (! w_data653w[0..0])), w_anode942w[2..2]);
	w_anode1023w[] = ( (w_anode1023w[2..2] & w_data653w[2..2]), (w_anode1023w[1..1] & w_data653w[1..1]), (w_anode1023w[0..0] & w_data653w[0..0]), w_anode942w[2..2]);
	w_anode655w[] = ( (w_anode655w[1..1] & (! data_wire[4..4])), (w_anode655w[0..0] & (! data_wire[3..3])), B"1");
	w_anode669w[] = ( (w_anode669w[2..2] & (! w_data653w[2..2])), (w_anode669w[1..1] & (! w_data653w[1..1])), (w_anode669w[0..0] & (! w_data653w[0..0])), w_anode655w[2..2]);
	w_anode686w[] = ( (w_anode686w[2..2] & (! w_data653w[2..2])), (w_anode686w[1..1] & (! w_data653w[1..1])), (w_anode686w[0..0] & w_data653w[0..0]), w_anode655w[2..2]);
	w_anode696w[] = ( (w_anode696w[2..2] & (! w_data653w[2..2])), (w_anode696w[1..1] & w_data653w[1..1]), (w_anode696w[0..0] & (! w_data653w[0..0])), w_anode655w[2..2]);
	w_anode706w[] = ( (w_anode706w[2..2] & (! w_data653w[2..2])), (w_anode706w[1..1] & w_data653w[1..1]), (w_anode706w[0..0] & w_data653w[0..0]), w_anode655w[2..2]);
	w_anode716w[] = ( (w_anode716w[2..2] & w_data653w[2..2]), (w_anode716w[1..1] & (! w_data653w[1..1])), (w_anode716w[0..0] & (! w_data653w[0..0])), w_anode655w[2..2]);
	w_anode726w[] = ( (w_anode726w[2..2] & w_data653w[2..2]), (w_anode726w[1..1] & (! w_data653w[1..1])), (w_anode726w[0..0] & w_data653w[0..0]), w_anode655w[2..2]);
	w_anode736w[] = ( (w_anode736w[2..2] & w_data653w[2..2]), (w_anode736w[1..1] & w_data653w[1..1]), (w_anode736w[0..0] & (! w_data653w[0..0])), w_anode655w[2..2]);
	w_anode746w[] = ( (w_anode746w[2..2] & w_data653w[2..2]), (w_anode746w[1..1] & w_data653w[1..1]), (w_anode746w[0..0] & w_data653w[0..0]), w_anode655w[2..2]);
	w_anode758w[] = ( (w_anode758w[1..1] & (! data_wire[4..4])), (w_anode758w[0..0] & data_wire[3..3]), B"1");
	w_anode768w[] = ( (w_anode768w[2..2] & (! w_data653w[2..2])), (w_anode768w[1..1] & (! w_data653w[1..1])), (w_anode768w[0..0] & (! w_data653w[0..0])), w_anode758w[2..2]);
	w_anode779w[] = ( (w_anode779w[2..2] & (! w_data653w[2..2])), (w_anode779w[1..1] & (! w_data653w[1..1])), (w_anode779w[0..0] & w_data653w[0..0]), w_anode758w[2..2]);
	w_anode789w[] = ( (w_anode789w[2..2] & (! w_data653w[2..2])), (w_anode789w[1..1] & w_data653w[1..1]), (w_anode789w[0..0] & (! w_data653w[0..0])), w_anode758w[2..2]);
	w_anode799w[] = ( (w_anode799w[2..2] & (! w_data653w[2..2])), (w_anode799w[1..1] & w_data653w[1..1]), (w_anode799w[0..0] & w_data653w[0..0]), w_anode758w[2..2]);
	w_anode809w[] = ( (w_anode809w[2..2] & w_data653w[2..2]), (w_anode809w[1..1] & (! w_data653w[1..1])), (w_anode809w[0..0] & (! w_data653w[0..0])), w_anode758w[2..2]);
	w_anode819w[] = ( (w_anode819w[2..2] & w_data653w[2..2]), (w_anode819w[1..1] & (! w_data653w[1..1])), (w_anode819w[0..0] & w_data653w[0..0]), w_anode758w[2..2]);
	w_anode829w[] = ( (w_anode829w[2..2] & w_data653w[2..2]), (w_anode829w[1..1] & w_data653w[1..1]), (w_anode829w[0..0] & (! w_data653w[0..0])), w_anode758w[2..2]);
	w_anode839w[] = ( (w_anode839w[2..2] & w_data653w[2..2]), (w_anode839w[1..1] & w_data653w[1..1]), (w_anode839w[0..0] & w_data653w[0..0]), w_anode758w[2..2]);
	w_anode850w[] = ( (w_anode850w[1..1] & data_wire[4..4]), (w_anode850w[0..0] & (! data_wire[3..3])), B"1");
	w_anode860w[] = ( (w_anode860w[2..2] & (! w_data653w[2..2])), (w_anode860w[1..1] & (! w_data653w[1..1])), (w_anode860w[0..0] & (! w_data653w[0..0])), w_anode850w[2..2]);
	w_anode871w[] = ( (w_anode871w[2..2] & (! w_data653w[2..2])), (w_anode871w[1..1] & (! w_data653w[1..1])), (w_anode871w[0..0] & w_data653w[0..0]), w_anode850w[2..2]);
	w_anode881w[] = ( (w_anode881w[2..2] & (! w_data653w[2..2])), (w_anode881w[1..1] & w_data653w[1..1]), (w_anode881w[0..0] & (! w_data653w[0..0])), w_anode850w[2..2]);
	w_anode891w[] = ( (w_anode891w[2..2] & (! w_data653w[2..2])), (w_anode891w[1..1] & w_data653w[1..1]), (w_anode891w[0..0] & w_data653w[0..0]), w_anode850w[2..2]);
	w_anode901w[] = ( (w_anode901w[2..2] & w_data653w[2..2]), (w_anode901w[1..1] & (! w_data653w[1..1])), (w_anode901w[0..0] & (! w_data653w[0..0])), w_anode850w[2..2]);
	w_anode911w[] = ( (w_anode911w[2..2] & w_data653w[2..2]), (w_anode911w[1..1] & (! w_data653w[1..1])), (w_anode911w[0..0] & w_data653w[0..0]), w_anode850w[2..2]);
	w_anode921w[] = ( (w_anode921w[2..2] & w_data653w[2..2]), (w_anode921w[1..1] & w_data653w[1..1]), (w_anode921w[0..0] & (! w_data653w[0..0])), w_anode850w[2..2]);
	w_anode931w[] = ( (w_anode931w[2..2] & w_data653w[2..2]), (w_anode931w[1..1] & w_data653w[1..1]), (w_anode931w[0..0] & w_data653w[0..0]), w_anode850w[2..2]);
	w_anode942w[] = ( (w_anode942w[1..1] & data_wire[4..4]), (w_anode942w[0..0] & data_wire[3..3]), B"1");
	w_anode952w[] = ( (w_anode952w[2..2] & (! w_data653w[2..2])), (w_anode952w[1..1] & (! w_data653w[1..1])), (w_anode952w[0..0] & (! w_data653w[0..0])), w_anode942w[2..2]);
	w_anode963w[] = ( (w_anode963w[2..2] & (! w_data653w[2..2])), (w_anode963w[1..1] & (! w_data653w[1..1])), (w_anode963w[0..0] & w_data653w[0..0]), w_anode942w[2..2]);
	w_anode973w[] = ( (w_anode973w[2..2] & (! w_data653w[2..2])), (w_anode973w[1..1] & w_data653w[1..1]), (w_anode973w[0..0] & (! w_data653w[0..0])), w_anode942w[2..2]);
	w_anode983w[] = ( (w_anode983w[2..2] & (! w_data653w[2..2])), (w_anode983w[1..1] & w_data653w[1..1]), (w_anode983w[0..0] & w_data653w[0..0]), w_anode942w[2..2]);
	w_anode993w[] = ( (w_anode993w[2..2] & w_data653w[2..2]), (w_anode993w[1..1] & (! w_data653w[1..1])), (w_anode993w[0..0] & (! w_data653w[0..0])), w_anode942w[2..2]);
	w_data653w[2..0] = data_wire[2..0];
END;
--VALID FILE
